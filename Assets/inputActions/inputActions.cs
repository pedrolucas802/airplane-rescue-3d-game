//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/inputActions/inputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""inputActions"",
    ""maps"": [
        {
            ""name"": ""FlyHelicopter"",
            ""id"": ""4271eecd-9f70-46c3-b3d6-8ed7980876c1"",
            ""actions"": [
                {
                    ""name"": ""UpAction"",
                    ""type"": ""Button"",
                    ""id"": ""b818e2ff-e5db-4cee-b076-cba7489aaf83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DownAction"",
                    ""type"": ""Button"",
                    ""id"": ""d45f3024-cc49-465b-b6cb-75077dce76f3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ForwardAction"",
                    ""type"": ""Button"",
                    ""id"": ""b141addb-ded4-4436-9817-a97fefa27071"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Back"",
                    ""type"": ""Button"",
                    ""id"": ""0e1e0015-fcb7-4fef-9fb2-54b4167e2142"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""a2eca0dd-0892-4f77-8d64-67c98d6d8a5e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""a2c39aa1-86c1-4d8d-ac6b-7f264b68b8cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnLeft"",
                    ""type"": ""Button"",
                    ""id"": ""dad2b2b2-01ab-4bbd-adb7-e8d65caf1a83"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TurnRight"",
                    ""type"": ""Button"",
                    ""id"": ""3dee624b-321f-40bc-a7c9-cfb942477023"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bda9355a-1a08-4a25-9929-692e24c678ab"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas X>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""manche"",
                    ""action"": ""UpAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea3679a2-9852-4b44-80e3-62a35d8b3ccc"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""manche"",
                    ""action"": ""UpAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09da0bf5-f255-4230-9eb8-e8d9a7034eea"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas X>/button8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""manche"",
                    ""action"": ""DownAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""a94f4ea7-ea13-4485-8126-1afd9319f0af"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ForwardAction"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b345bf1b-afe8-408d-b81d-c2c5bfb484a4"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas X>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""manche"",
                    ""action"": ""ForwardAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d396473b-512b-420b-8db6-940d96e6f5b8"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas X>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""manche"",
                    ""action"": ""ForwardAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0e69ef49-bcf3-4e1d-b407-f3859a40dc62"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas X>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""manche"",
                    ""action"": ""Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""408aa9d2-9a30-45d1-b3f0-9791ecbb344b"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas X>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""manche"",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""f3d20aac-86e1-4dca-8936-3e913194f691"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c3b67634-6e21-41d7-8cab-4d34949cba49"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas X>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""manche"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""c6688078-0cfc-45d2-8d23-61619d999d50"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas X>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""manche"",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e777644e-0889-4217-8ccb-1cfe01ca6aa2"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas X>/hat/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""manche"",
                    ""action"": ""TurnLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7621d78d-590b-49f3-8364-659fbbc46d1c"",
                    ""path"": ""<HID::Thrustmaster T.Flight Hotas X>/hat/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""manche"",
                    ""action"": ""TurnRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""manche"",
            ""bindingGroup"": ""manche"",
            ""devices"": []
        }
    ]
}");
        // FlyHelicopter
        m_FlyHelicopter = asset.FindActionMap("FlyHelicopter", throwIfNotFound: true);
        m_FlyHelicopter_UpAction = m_FlyHelicopter.FindAction("UpAction", throwIfNotFound: true);
        m_FlyHelicopter_DownAction = m_FlyHelicopter.FindAction("DownAction", throwIfNotFound: true);
        m_FlyHelicopter_ForwardAction = m_FlyHelicopter.FindAction("ForwardAction", throwIfNotFound: true);
        m_FlyHelicopter_Back = m_FlyHelicopter.FindAction("Back", throwIfNotFound: true);
        m_FlyHelicopter_Left = m_FlyHelicopter.FindAction("Left", throwIfNotFound: true);
        m_FlyHelicopter_Right = m_FlyHelicopter.FindAction("Right", throwIfNotFound: true);
        m_FlyHelicopter_TurnLeft = m_FlyHelicopter.FindAction("TurnLeft", throwIfNotFound: true);
        m_FlyHelicopter_TurnRight = m_FlyHelicopter.FindAction("TurnRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FlyHelicopter
    private readonly InputActionMap m_FlyHelicopter;
    private List<IFlyHelicopterActions> m_FlyHelicopterActionsCallbackInterfaces = new List<IFlyHelicopterActions>();
    private readonly InputAction m_FlyHelicopter_UpAction;
    private readonly InputAction m_FlyHelicopter_DownAction;
    private readonly InputAction m_FlyHelicopter_ForwardAction;
    private readonly InputAction m_FlyHelicopter_Back;
    private readonly InputAction m_FlyHelicopter_Left;
    private readonly InputAction m_FlyHelicopter_Right;
    private readonly InputAction m_FlyHelicopter_TurnLeft;
    private readonly InputAction m_FlyHelicopter_TurnRight;
    public struct FlyHelicopterActions
    {
        private @InputActions m_Wrapper;
        public FlyHelicopterActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @UpAction => m_Wrapper.m_FlyHelicopter_UpAction;
        public InputAction @DownAction => m_Wrapper.m_FlyHelicopter_DownAction;
        public InputAction @ForwardAction => m_Wrapper.m_FlyHelicopter_ForwardAction;
        public InputAction @Back => m_Wrapper.m_FlyHelicopter_Back;
        public InputAction @Left => m_Wrapper.m_FlyHelicopter_Left;
        public InputAction @Right => m_Wrapper.m_FlyHelicopter_Right;
        public InputAction @TurnLeft => m_Wrapper.m_FlyHelicopter_TurnLeft;
        public InputAction @TurnRight => m_Wrapper.m_FlyHelicopter_TurnRight;
        public InputActionMap Get() { return m_Wrapper.m_FlyHelicopter; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlyHelicopterActions set) { return set.Get(); }
        public void AddCallbacks(IFlyHelicopterActions instance)
        {
            if (instance == null || m_Wrapper.m_FlyHelicopterActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_FlyHelicopterActionsCallbackInterfaces.Add(instance);
            @UpAction.started += instance.OnUpAction;
            @UpAction.performed += instance.OnUpAction;
            @UpAction.canceled += instance.OnUpAction;
            @DownAction.started += instance.OnDownAction;
            @DownAction.performed += instance.OnDownAction;
            @DownAction.canceled += instance.OnDownAction;
            @ForwardAction.started += instance.OnForwardAction;
            @ForwardAction.performed += instance.OnForwardAction;
            @ForwardAction.canceled += instance.OnForwardAction;
            @Back.started += instance.OnBack;
            @Back.performed += instance.OnBack;
            @Back.canceled += instance.OnBack;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
            @TurnLeft.started += instance.OnTurnLeft;
            @TurnLeft.performed += instance.OnTurnLeft;
            @TurnLeft.canceled += instance.OnTurnLeft;
            @TurnRight.started += instance.OnTurnRight;
            @TurnRight.performed += instance.OnTurnRight;
            @TurnRight.canceled += instance.OnTurnRight;
        }

        private void UnregisterCallbacks(IFlyHelicopterActions instance)
        {
            @UpAction.started -= instance.OnUpAction;
            @UpAction.performed -= instance.OnUpAction;
            @UpAction.canceled -= instance.OnUpAction;
            @DownAction.started -= instance.OnDownAction;
            @DownAction.performed -= instance.OnDownAction;
            @DownAction.canceled -= instance.OnDownAction;
            @ForwardAction.started -= instance.OnForwardAction;
            @ForwardAction.performed -= instance.OnForwardAction;
            @ForwardAction.canceled -= instance.OnForwardAction;
            @Back.started -= instance.OnBack;
            @Back.performed -= instance.OnBack;
            @Back.canceled -= instance.OnBack;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
            @TurnLeft.started -= instance.OnTurnLeft;
            @TurnLeft.performed -= instance.OnTurnLeft;
            @TurnLeft.canceled -= instance.OnTurnLeft;
            @TurnRight.started -= instance.OnTurnRight;
            @TurnRight.performed -= instance.OnTurnRight;
            @TurnRight.canceled -= instance.OnTurnRight;
        }

        public void RemoveCallbacks(IFlyHelicopterActions instance)
        {
            if (m_Wrapper.m_FlyHelicopterActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IFlyHelicopterActions instance)
        {
            foreach (var item in m_Wrapper.m_FlyHelicopterActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_FlyHelicopterActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public FlyHelicopterActions @FlyHelicopter => new FlyHelicopterActions(this);
    private int m_mancheSchemeIndex = -1;
    public InputControlScheme mancheScheme
    {
        get
        {
            if (m_mancheSchemeIndex == -1) m_mancheSchemeIndex = asset.FindControlSchemeIndex("manche");
            return asset.controlSchemes[m_mancheSchemeIndex];
        }
    }
    public interface IFlyHelicopterActions
    {
        void OnUpAction(InputAction.CallbackContext context);
        void OnDownAction(InputAction.CallbackContext context);
        void OnForwardAction(InputAction.CallbackContext context);
        void OnBack(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
        void OnTurnLeft(InputAction.CallbackContext context);
        void OnTurnRight(InputAction.CallbackContext context);
    }
}
